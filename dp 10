Super Egg Drop
#tc:O(kn)
#sc:O(n)
class Solution(object):
    def superEggDrop(self, K, N):
        """
        :type K: int
        :type N: int
        :rtype: int
        """ 
        dp = range(N+1)
        for i in range(2, K+1):
            k = 1
            ndp = [0, 1] + [float('inf')]*(N-1)
            for j in range(2, N+1):
                while k < j+1 and ndp[j-k] > dp[k-1]:
                    k += 1
                ndp[j] = 1 + dp[k-1]
            dp = ndp
        return dp[N]
Burst Balloons
#tc isO(len(nums)**3), 
#sc is O(0.5*len(nums)**2)
class Solution:
    def maxCoins(self, nums: List[int]) -> int:
        if len(nums) == 1: return nums[0]
        nums = [1] + nums + [1]
        leng = len(nums)
        @cache
        def dfs(i, j):
            if j - i <= 1: return 0 # there is no balloon between the neighbor
            ans = 0
            for k in range(i+1, j):
                ans = max(ans, dfs(i,k) + dfs(k,j) + nums[i] * nums[j] * nums[k])
            return  ans
        return dfs(0, leng-1)  
